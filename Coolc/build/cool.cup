/*
 *  cool.cup
 *              Parser definition for the COOL language.
 *
 */
package cool.parser;
import java_cup.runtime.*;
import cool.common.AbstractSymbol;
import cool.common.TreeConstants;
import cool.common.Utilities;
import cool.lexer.CoolTokenLexer;

/* Stuff enclosed in {: :} is copied verbatim to the class containing
all parser actions.*/

action code {: 

    int curr_lineno() {
	return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
	return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }
:} 

parser code {:
    public int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
    	String filename = action_obj.curr_filename().toString();
        System.err.print("\"" + filename + "\", line " + lineno + 
		         ": syntax error at or near ");
        Utilities.printToken(cur_token);
	    omerrs++;
    	if (omerrs>50) {
	       System.err.println("More than 50 errors");
    	   System.exit(1);
	    }
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }
:}

/* A few terminals have types for associated lexemes.
The token ERROR is never used in the parser; thus, it is a parse error when
the lexer returns it.  */

terminal CLASS, ELSE, FI, IF, IN, INHERITS, LET, LET_STMT, LOOP, POOL, THEN, WHILE;
terminal CASE, ESAC, OF, DARROW, NEW, ISVOID;
terminal ASSIGN, NOT, LE, ERROR;
terminal PLUS, DIV, MINUS, MULT, EQ, LT, DOT, NEG, COMMA, SEMI, COLON;
terminal LPAREN, RPAREN, AT, LBRACE, RBRACE;
terminal AbstractSymbol STR_CONST, INT_CONST;
terminal Boolean BOOL_CONST;
terminal AbstractSymbol TYPEID, OBJECTID;

/* Non terminal list giving a type for the semantic value of each non terminal.
 * The types are as specific as possible.
 */
nonterminal program program;
nonterminal Classes class_list;
nonterminal class_ class;
nonterminal Features feature_list;
nonterminal Feature feature;
nonterminal Formals formal_list;
nonterminal formal formal;
nonterminal Expression expression;
nonterminal Expressions comma_separated_expression_list;
nonterminal Expressions semicolon_separated_expression_list;
nonterminal branch typcase;
nonterminal Cases typcase_list;
nonterminal Expression nested_let;

/* Precedence declarations */
//precedence left LET_PREC;
precedence right ASSIGN;
precedence left NOT;
precedence nonassoc LE, LT, EQ;
precedence left PLUS, MINUS;
precedence left MULT, DIV;
precedence left ISVOID;
precedence left NEG;
precedence left AT;
precedence left DOT;
//precedence left PAREN;

/* Grammer
 * Refer to the cool manual
 */
program	
	::= class_list:cl
	{: RESULT = new program(curr_lineno(), cl); :}
    ;

class_list
	::= class:c 
	{: RESULT = (new Classes(curr_lineno())).appendElement(c); :}
	| class_list:cl class:c
	{: RESULT = cl.appendElement(c); :}
	;

class
	::=
    CLASS TYPEID:t LBRACE feature_list:fl RBRACE SEMI
    {: RESULT = new class_(curr_lineno(), t, TreeConstants.Object_, fl, curr_filename()); :}
	| CLASS TYPEID:t INHERITS TYPEID:ti LBRACE feature_list:fl RBRACE SEMI
	{: RESULT = new class_(curr_lineno(), t, ti, fl, curr_filename()); :}
    | error:e SEMI
    {: //System.out.println("class"); :}
	;

feature_list
	::=
	{: RESULT = new Features(curr_lineno()); :}
    | feature_list:fl feature:f 
    {: RESULT = fl.appendElement(f); :}
	;

feature
    ::= OBJECTID:o LPAREN formal_list:fl RPAREN COLON TYPEID:t LBRACE expression:e RBRACE SEMI
    {: RESULT = new method(curr_lineno(), o, fl, t, e); :}
    | OBJECTID:o LPAREN RPAREN COLON TYPEID:t LBRACE expression:e RBRACE SEMI
    {: RESULT = new method(curr_lineno(), o, new Formals(curr_lineno()), t, e); :}
    | OBJECTID:o COLON TYPEID:t ASSIGN expression:e SEMI
    {: RESULT = new attr(curr_lineno(), o, t, e); :}
    | OBJECTID:o COLON TYPEID:t SEMI
    {: RESULT = new attr(curr_lineno(), o, t, new no_expr(curr_lineno())); :}
    | error:e SEMI
    {: //System.out.println("feature"); :}
    ;

formal_list
    ::= formal:f
    {: RESULT = (new Formals(curr_lineno())).appendElement(f); :}
    | formal_list:fl COMMA formal:f
    {: RESULT =fl.appendElement(f); :}
    ;

formal
    ::= OBJECTID:o COLON TYPEID:t
    {: RESULT = new formal(curr_lineno(), o, t); :}
    ;

expression
    ::= OBJECTID:o ASSIGN expression:e
    {: RESULT = new assign(curr_lineno(), o, e); :}
    | expression:e AT TYPEID:t DOT OBJECTID:o LPAREN comma_separated_expression_list:el RPAREN
    {: RESULT = new static_dispatch(curr_lineno(), e, t, o, el); :}
    | expression:e DOT OBJECTID:o LPAREN comma_separated_expression_list:el RPAREN
    {: RESULT = new dispatch(curr_lineno(), e, o, el); :}
    | OBJECTID:o LPAREN comma_separated_expression_list:el RPAREN
    {: RESULT = new dispatch(curr_lineno(), new object(curr_lineno(), TreeConstants.self), o, el); :}
    | IF expression:i THEN expression:t ELSE expression:e FI
    {: RESULT = new cond(curr_lineno(), i, t, e); :}
    | WHILE expression:e LOOP expression:body POOL
    {: RESULT = new loop(curr_lineno(), e, body); :}
    | LBRACE semicolon_separated_expression_list:el RBRACE
    {: RESULT = new block(curr_lineno(), el); :}
    | LET OBJECTID:o COLON TYPEID:t nested_let:nl
    {: RESULT = new let(curr_lineno(), o, t, new no_expr(curr_lineno()), nl); :}
    | LET OBJECTID:o COLON TYPEID:t ASSIGN expression:e nested_let:nl
    {: RESULT = new let(curr_lineno(), o, t, e, nl); :}
    | LET error:e nested_let
    {: //System.out.println("let"); :}
    | CASE expression:e OF typcase_list:tl ESAC
    {: RESULT = new typcase(curr_lineno(), e, tl); :}
    | NEW TYPEID:t
    {: RESULT = new new_(curr_lineno(), t); :}
    | ISVOID expression:e
    {: RESULT = new isvoid(curr_lineno(), e); :}
    | expression:e1 PLUS expression:e2
    {: RESULT = new plus(curr_lineno(), e1, e2); :}
    | expression:e1 MINUS expression:e2
    {: RESULT = new sub(curr_lineno(), e1, e2); :}
    | expression:e1 MULT expression:e2
    {: RESULT = new mul(curr_lineno(), e1, e2); :}
    | expression:e1 DIV expression:e2
    {: RESULT = new divide(curr_lineno(), e1, e2); :}
    | NEG expression:e
    {: RESULT = new neg(curr_lineno(), e); :}
    | expression:e1 LT expression:e2
    {: RESULT = new lt(curr_lineno(), e1, e2); :}
    | expression:e1 LE expression:e2
    {: RESULT = new leq(curr_lineno(), e1, e2); :}
    | expression:e1 EQ expression:e2
    {: RESULT = new eq(curr_lineno(), e1, e2); :}
    | NOT expression:e
    {: RESULT = new comp(curr_lineno(), e); :}
    | LPAREN expression:e RPAREN //%prec PAREN
    {: RESULT = e; :}
    | OBJECTID:o
    {: RESULT = new object(curr_lineno(), o); :}
    | INT_CONST:i
    {: RESULT = new int_const(curr_lineno(), i); :}
    | STR_CONST:s
    {: RESULT = new string_const(curr_lineno(), s); :}
    | BOOL_CONST:b
    {: RESULT = new bool_const(curr_lineno(), b); :}
    ;

comma_separated_expression_list
    ::=
    {: RESULT = new Expressions(curr_lineno()); :}
    | expression:e
    {: RESULT = (new Expressions(curr_lineno())).appendElement(e); :}
    | comma_separated_expression_list:el COMMA expression:e
    {: RESULT = el.appendElement(e); :}
    ;

semicolon_separated_expression_list
    ::= expression:e SEMI
    {: RESULT = (new Expressions(curr_lineno())).appendElement(e); :}
    | semicolon_separated_expression_list:el expression:e SEMI
    {: if (el != null)
        RESULT = el.appendElement(e);
       else
        RESULT = (new Expressions(curr_lineno())).appendElement(e);
    :}
    | error:e SEMI
    {: //System.out.println("semicolon_eperated_expression_list"); :}
    ;

typcase
    ::= OBJECTID:o COLON TYPEID:t DARROW expression:e SEMI
    {: RESULT = new branch(curr_lineno(), o, t, e); :}
    ;

typcase_list
    ::= typcase:t
    {: RESULT = (new Cases(curr_lineno())).appendElement(t); :}
    | typcase_list:tl typcase:t
    {: RESULT = tl.appendElement(t); :}
    ;

nested_let
    ::= IN expression:e
    {: RESULT = e; :}
    | COMMA OBJECTID:o COLON TYPEID:t nested_let:nl
    {: RESULT = new let(curr_lineno(), o, t, new no_expr(curr_lineno()), nl); :}
    | COMMA OBJECTID:o COLON TYPEID:t ASSIGN expression:e nested_let:nl
    {: RESULT = new let(curr_lineno(), o, t, e, nl); :}
    ;

