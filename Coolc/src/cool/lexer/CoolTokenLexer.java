/*
 *  The scanner definition for COOL. This scanner is generated by my specification file
 */
/*
 * User Code
 * Stuff here is copied verbatim into the lexer source file that Jlex outputs.
 */
package cool.lexer;
import java_cup.runtime.Symbol;
import cool.common.AbstractSymbol;
import cool.common.AbstractTable;
import cool.common.EscapedNullInCoolStringException;
import cool.common.NullInCoolStringException;
import cool.parser.TokenConstants;


public class CoolTokenLexer  implements java_cup.runtime.Scanner {
	private final int YY_BUFFER_SIZE = 512;
	private final int YY_F = -1;
	private final int YY_NO_STATE = -1;
	private final int YY_NOT_ACCEPT = 0;
	private final int YY_START = 1;
	private final int YY_END = 2;
	private final int YY_NO_ANCHOR = 4;
	private final int YY_BOL = 128;
	private final int YY_EOF = 129;

/*  Stuff enclosed in %{ %} is copied verbatim to the lexer class
 *  definition. All the extra variables/functions used in the
 *  lexer actions goes here.  
 */
    // Max size of cool string constants
    static int MAX_STR_CONST = 1024;
    // For assembling string constants
    CoolStringBuilder coolStr = new CoolStringBuilder();
    // Helps identify the line number of the tokens
    private int curr_lineno = 1;
    // Used to print the lexer output by Utilities.dumptoken()
    public int curr_lineno() { return curr_lineno; }
    private AbstractSymbol filename;
    public void set_filename(String fname) {
	filename = AbstractTable.stringtable.addString(fname);
    }
    public AbstractSymbol curr_filename() {
	return filename;
    }
    // used to track the nesting level of comments
    private int nested = 0;
	private java.io.BufferedReader yy_reader;
	private int yy_buffer_index;
	private int yy_buffer_read;
	private int yy_buffer_start;
	private int yy_buffer_end;
	private char yy_buffer[];
	private boolean yy_at_bol;
	private int yy_lexical_state;

	public CoolTokenLexer  (java.io.Reader reader) {
		this ();
		if (null == reader) {
			throw (new Error("Error: Bad input stream initializer."));
		}
		yy_reader = new java.io.BufferedReader(reader);
	}

	public CoolTokenLexer  (java.io.InputStream instream) {
		this ();
		if (null == instream) {
			throw (new Error("Error: Bad input stream initializer."));
		}
		yy_reader = new java.io.BufferedReader(new java.io.InputStreamReader(instream));
	}

	private CoolTokenLexer  () {
		yy_buffer = new char[YY_BUFFER_SIZE];
		yy_buffer_read = 0;
		yy_buffer_index = 0;
		yy_buffer_start = 0;
		yy_buffer_end = 0;
		yy_at_bol = true;
		yy_lexical_state = YYINITIAL;

/*  Stuff enclosed in %init{ %init} is copied verbatim to the lexer
 *  class constructor.
 */
	}

	private boolean yy_eof_done = false;
	private final int STRING = 2;
	private final int YYINITIAL = 0;
	private final int COMMENT = 1;
	private final int yy_state_dtrans[] = {
		0,
		59,
		56
	};
	private void yybegin (int state) {
		yy_lexical_state = state;
	}
	private int yy_advance ()
		throws java.io.IOException {
		int next_read;
		int i;
		int j;

		if (yy_buffer_index < yy_buffer_read) {
			return yy_buffer[yy_buffer_index++];
		}

		if (0 != yy_buffer_start) {
			i = yy_buffer_start;
			j = 0;
			while (i < yy_buffer_read) {
				yy_buffer[j] = yy_buffer[i];
				++i;
				++j;
			}
			yy_buffer_end = yy_buffer_end - yy_buffer_start;
			yy_buffer_start = 0;
			yy_buffer_read = j;
			yy_buffer_index = j;
			next_read = yy_reader.read(yy_buffer,
					yy_buffer_read,
					yy_buffer.length - yy_buffer_read);
			if (-1 == next_read) {
				return YY_EOF;
			}
			yy_buffer_read = yy_buffer_read + next_read;
		}

		while (yy_buffer_index >= yy_buffer_read) {
			if (yy_buffer_index >= yy_buffer.length) {
				yy_buffer = yy_double(yy_buffer);
			}
			next_read = yy_reader.read(yy_buffer,
					yy_buffer_read,
					yy_buffer.length - yy_buffer_read);
			if (-1 == next_read) {
				return YY_EOF;
			}
			yy_buffer_read = yy_buffer_read + next_read;
		}
		return yy_buffer[yy_buffer_index++];
	}
	private void yy_move_end () {
		if (yy_buffer_end > yy_buffer_start &&
		    '\n' == yy_buffer[yy_buffer_end-1])
			yy_buffer_end--;
		if (yy_buffer_end > yy_buffer_start &&
		    '\r' == yy_buffer[yy_buffer_end-1])
			yy_buffer_end--;
	}
	private boolean yy_last_was_cr=false;
	private void yy_mark_start () {
		yy_buffer_start = yy_buffer_index;
	}
	private void yy_mark_end () {
		yy_buffer_end = yy_buffer_index;
	}
	private void yy_to_mark () {
		yy_buffer_index = yy_buffer_end;
		yy_at_bol = (yy_buffer_end > yy_buffer_start) &&
		            ('\r' == yy_buffer[yy_buffer_end-1] ||
		             '\n' == yy_buffer[yy_buffer_end-1] ||
		             2028/*LS*/ == yy_buffer[yy_buffer_end-1] ||
		             2029/*PS*/ == yy_buffer[yy_buffer_end-1]);
	}
	private java.lang.String yytext () {
		return (new java.lang.String(yy_buffer,
			yy_buffer_start,
			yy_buffer_end - yy_buffer_start));
	}
	private int yylength () {
		return yy_buffer_end - yy_buffer_start;
	}
	private char[] yy_double (char buf[]) {
		int i;
		char newbuf[];
		newbuf = new char[2*buf.length];
		for (i = 0; i < buf.length; ++i) {
			newbuf[i] = buf[i];
		}
		return newbuf;
	}
	private final int YY_E_INTERNAL = 0;
	private final int YY_E_MATCH = 1;
	private java.lang.String yy_error_string[] = {
		"Error: Internal error.\n",
		"Error: Unmatched input.\n"
	};
	private void yy_error (int code,boolean fatal) {
		java.lang.System.out.print(yy_error_string[code]);
		java.lang.System.out.flush();
		if (fatal) {
			throw new Error("Fatal Error.\n");
		}
	}
	private int[][] unpackFromString(int size1, int size2, String st) {
		int colonIndex = -1;
		String lengthString;
		int sequenceLength = 0;
		int sequenceInteger = 0;

		int commaIndex;
		String workString;

		int res[][] = new int[size1][size2];
		for (int i= 0; i < size1; i++) {
			for (int j= 0; j < size2; j++) {
				if (sequenceLength != 0) {
					res[i][j] = sequenceInteger;
					sequenceLength--;
					continue;
				}
				commaIndex = st.indexOf(',');
				workString = (commaIndex==-1) ? st :
					st.substring(0, commaIndex);
				st = st.substring(commaIndex+1);
				colonIndex = workString.indexOf(':');
				if (colonIndex == -1) {
					res[i][j]=Integer.parseInt(workString);
					continue;
				}
				lengthString =
					workString.substring(colonIndex+1);
				sequenceLength=Integer.parseInt(lengthString);
				workString=workString.substring(0,colonIndex);
				sequenceInteger=Integer.parseInt(workString);
				res[i][j] = sequenceInteger;
				sequenceLength--;
			}
		}
		return res;
	}
	private int yy_acpt[] = {
		/* 0 */ YY_NOT_ACCEPT,
		/* 1 */ YY_NO_ANCHOR,
		/* 2 */ YY_NO_ANCHOR,
		/* 3 */ YY_NO_ANCHOR,
		/* 4 */ YY_NO_ANCHOR,
		/* 5 */ YY_NO_ANCHOR,
		/* 6 */ YY_NO_ANCHOR,
		/* 7 */ YY_NO_ANCHOR,
		/* 8 */ YY_NO_ANCHOR,
		/* 9 */ YY_NO_ANCHOR,
		/* 10 */ YY_NO_ANCHOR,
		/* 11 */ YY_NO_ANCHOR,
		/* 12 */ YY_NO_ANCHOR,
		/* 13 */ YY_NO_ANCHOR,
		/* 14 */ YY_NO_ANCHOR,
		/* 15 */ YY_NO_ANCHOR,
		/* 16 */ YY_NO_ANCHOR,
		/* 17 */ YY_NO_ANCHOR,
		/* 18 */ YY_NO_ANCHOR,
		/* 19 */ YY_NO_ANCHOR,
		/* 20 */ YY_NO_ANCHOR,
		/* 21 */ YY_NO_ANCHOR,
		/* 22 */ YY_NO_ANCHOR,
		/* 23 */ YY_NO_ANCHOR,
		/* 24 */ YY_NO_ANCHOR,
		/* 25 */ YY_NO_ANCHOR,
		/* 26 */ YY_NO_ANCHOR,
		/* 27 */ YY_NO_ANCHOR,
		/* 28 */ YY_NO_ANCHOR,
		/* 29 */ YY_NO_ANCHOR,
		/* 30 */ YY_NO_ANCHOR,
		/* 31 */ YY_NO_ANCHOR,
		/* 32 */ YY_NO_ANCHOR,
		/* 33 */ YY_NO_ANCHOR,
		/* 34 */ YY_NO_ANCHOR,
		/* 35 */ YY_NO_ANCHOR,
		/* 36 */ YY_NO_ANCHOR,
		/* 37 */ YY_NO_ANCHOR,
		/* 38 */ YY_NO_ANCHOR,
		/* 39 */ YY_NO_ANCHOR,
		/* 40 */ YY_NO_ANCHOR,
		/* 41 */ YY_NO_ANCHOR,
		/* 42 */ YY_NO_ANCHOR,
		/* 43 */ YY_NO_ANCHOR,
		/* 44 */ YY_NO_ANCHOR,
		/* 45 */ YY_NO_ANCHOR,
		/* 46 */ YY_NO_ANCHOR,
		/* 47 */ YY_NO_ANCHOR,
		/* 48 */ YY_NO_ANCHOR,
		/* 49 */ YY_NO_ANCHOR,
		/* 50 */ YY_NO_ANCHOR,
		/* 51 */ YY_NO_ANCHOR,
		/* 52 */ YY_NO_ANCHOR,
		/* 53 */ YY_NO_ANCHOR,
		/* 54 */ YY_NO_ANCHOR,
		/* 55 */ YY_NO_ANCHOR,
		/* 56 */ YY_NO_ANCHOR,
		/* 57 */ YY_NO_ANCHOR,
		/* 58 */ YY_NO_ANCHOR,
		/* 59 */ YY_NOT_ACCEPT,
		/* 60 */ YY_NO_ANCHOR,
		/* 61 */ YY_NO_ANCHOR,
		/* 62 */ YY_NO_ANCHOR,
		/* 63 */ YY_NO_ANCHOR,
		/* 64 */ YY_NO_ANCHOR,
		/* 65 */ YY_NO_ANCHOR,
		/* 66 */ YY_NO_ANCHOR,
		/* 67 */ YY_NO_ANCHOR,
		/* 68 */ YY_NO_ANCHOR,
		/* 69 */ YY_NO_ANCHOR,
		/* 70 */ YY_NO_ANCHOR,
		/* 71 */ YY_NO_ANCHOR,
		/* 72 */ YY_NO_ANCHOR,
		/* 73 */ YY_NO_ANCHOR,
		/* 74 */ YY_NO_ANCHOR,
		/* 75 */ YY_NO_ANCHOR,
		/* 76 */ YY_NO_ANCHOR,
		/* 77 */ YY_NO_ANCHOR,
		/* 78 */ YY_NO_ANCHOR,
		/* 79 */ YY_NO_ANCHOR,
		/* 80 */ YY_NO_ANCHOR,
		/* 81 */ YY_NOT_ACCEPT,
		/* 82 */ YY_NO_ANCHOR,
		/* 83 */ YY_NO_ANCHOR,
		/* 84 */ YY_NO_ANCHOR,
		/* 85 */ YY_NOT_ACCEPT,
		/* 86 */ YY_NO_ANCHOR,
		/* 87 */ YY_NO_ANCHOR,
		/* 88 */ YY_NOT_ACCEPT,
		/* 89 */ YY_NO_ANCHOR,
		/* 90 */ YY_NO_ANCHOR,
		/* 91 */ YY_NOT_ACCEPT,
		/* 92 */ YY_NO_ANCHOR,
		/* 93 */ YY_NO_ANCHOR,
		/* 94 */ YY_NO_ANCHOR,
		/* 95 */ YY_NO_ANCHOR,
		/* 96 */ YY_NO_ANCHOR,
		/* 97 */ YY_NO_ANCHOR,
		/* 98 */ YY_NO_ANCHOR,
		/* 99 */ YY_NO_ANCHOR,
		/* 100 */ YY_NO_ANCHOR,
		/* 101 */ YY_NO_ANCHOR,
		/* 102 */ YY_NO_ANCHOR,
		/* 103 */ YY_NO_ANCHOR,
		/* 104 */ YY_NO_ANCHOR,
		/* 105 */ YY_NO_ANCHOR,
		/* 106 */ YY_NO_ANCHOR,
		/* 107 */ YY_NO_ANCHOR,
		/* 108 */ YY_NO_ANCHOR,
		/* 109 */ YY_NO_ANCHOR,
		/* 110 */ YY_NO_ANCHOR,
		/* 111 */ YY_NO_ANCHOR,
		/* 112 */ YY_NO_ANCHOR,
		/* 113 */ YY_NO_ANCHOR,
		/* 114 */ YY_NO_ANCHOR,
		/* 115 */ YY_NO_ANCHOR,
		/* 116 */ YY_NO_ANCHOR,
		/* 117 */ YY_NO_ANCHOR,
		/* 118 */ YY_NO_ANCHOR,
		/* 119 */ YY_NO_ANCHOR,
		/* 120 */ YY_NO_ANCHOR,
		/* 121 */ YY_NO_ANCHOR,
		/* 122 */ YY_NO_ANCHOR,
		/* 123 */ YY_NO_ANCHOR,
		/* 124 */ YY_NO_ANCHOR,
		/* 125 */ YY_NO_ANCHOR,
		/* 126 */ YY_NO_ANCHOR,
		/* 127 */ YY_NO_ANCHOR,
		/* 128 */ YY_NO_ANCHOR,
		/* 129 */ YY_NO_ANCHOR,
		/* 130 */ YY_NO_ANCHOR,
		/* 131 */ YY_NO_ANCHOR,
		/* 132 */ YY_NO_ANCHOR,
		/* 133 */ YY_NO_ANCHOR,
		/* 134 */ YY_NO_ANCHOR,
		/* 135 */ YY_NO_ANCHOR,
		/* 136 */ YY_NO_ANCHOR,
		/* 137 */ YY_NO_ANCHOR,
		/* 138 */ YY_NO_ANCHOR,
		/* 139 */ YY_NO_ANCHOR,
		/* 140 */ YY_NO_ANCHOR,
		/* 141 */ YY_NO_ANCHOR,
		/* 142 */ YY_NO_ANCHOR,
		/* 143 */ YY_NO_ANCHOR,
		/* 144 */ YY_NO_ANCHOR,
		/* 145 */ YY_NO_ANCHOR,
		/* 146 */ YY_NO_ANCHOR,
		/* 147 */ YY_NO_ANCHOR,
		/* 148 */ YY_NO_ANCHOR,
		/* 149 */ YY_NO_ANCHOR,
		/* 150 */ YY_NO_ANCHOR,
		/* 151 */ YY_NO_ANCHOR,
		/* 152 */ YY_NO_ANCHOR,
		/* 153 */ YY_NO_ANCHOR,
		/* 154 */ YY_NO_ANCHOR,
		/* 155 */ YY_NO_ANCHOR,
		/* 156 */ YY_NO_ANCHOR,
		/* 157 */ YY_NO_ANCHOR,
		/* 158 */ YY_NO_ANCHOR,
		/* 159 */ YY_NO_ANCHOR,
		/* 160 */ YY_NO_ANCHOR,
		/* 161 */ YY_NO_ANCHOR,
		/* 162 */ YY_NO_ANCHOR,
		/* 163 */ YY_NO_ANCHOR,
		/* 164 */ YY_NO_ANCHOR,
		/* 165 */ YY_NO_ANCHOR,
		/* 166 */ YY_NO_ANCHOR,
		/* 167 */ YY_NO_ANCHOR,
		/* 168 */ YY_NO_ANCHOR
	};
	private int yy_cmap[] = unpackFromString(1,130,
"41:9,61,5,61:2,40,41:18,61,41,39,41:5,1,3,2,11,17,6,18,12,42:10,15,16,9,7,8" +
",41,19,43,44,45,46,47,25,44,48,49,44:2,50,44,51,52,53,44,54,55,30,56,57,58," +
"44:3,41,4,41:2,59,41,22,60,20,35,24,38,60,28,26,60:2,21,60,27,31,32,60,29,2" +
"3,36,37,34,33,60:3,13,41,14,10,41,0:2")[0];

	private int yy_rmap[] = unpackFromString(1,169,
"0,1,2,3,1:3,4,5,6,1:10,7,8,1,9,10,1:2,11,1:3,12,13,14,13:8,12,13:7,15,1:5,1" +
"6,1:2,17,18,19,13,12,20,12:8,13,12:5,21,22,23,24,25,1,26,27,28,21,29,30,31," +
"32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56," +
"57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81," +
"82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,13,12,98,99,100,101,102,103" +
",104,105,106")[0];

	private int yy_nxt[][] = unpackFromString(107,62,
"1,2,3,4,5,6,7,8,5,9,10,11,12,13,14,15,16,17,18,19,20,118,158:2,160,21,60,12" +
"0,158:2,61,82,162,164,158:2,166,158,86,22,23,5,24,159:2,161,159,163,159,83," +
"119,121,87,165,159:4,167,5,158,23,-1:64,25,-1:62,26,-1:64,27,-1:63,28,-1:59" +
",29,30,-1:74,158,168,122,158:16,-1:3,158,122,158:6,168,158:10,-1:21,159:6,3" +
"1,159:12,-1:3,159:7,31,159:11,-1:41,23,-1:20,23,-1:42,24,-1:20,27:4,-1,27:5" +
"6,-1:20,159:19,-1:3,159:19,-1:21,158:19,-1:3,158:19,-1:21,158:8,146,158:10," +
"-1:3,158:6,146,158:12,-1:4,50:2,-1,50:56,1,80:3,91,57,80:33,58,80:22,1,81,8" +
"5,50:2,51,50:56,-1:20,158:3,130,158,32,158,33,158:10,32,-1:3,158:9,33,158:3" +
",130,158:5,-1:21,159:8,123,159:10,-1:3,159:6,123,159:12,-1:21,159:8,145,159" +
":10,-1:3,159:6,145,159:12,-1:3,88,55,-1:59,80:3,-1:2,80:33,-1,80:22,-1,52,5" +
"3,52:59,-1:20,158:5,34,158:12,34,-1:3,158:19,-1:21,159:3,133,159,63,159,64," +
"159:10,63,-1:3,159:9,64,159:3,133,159:5,-1:2,54,79,55,54:58,-1:20,158:2,140" +
",158:3,62,158:12,-1:3,158,140,158:5,62,158:11,-1:21,159:5,65,159:12,65,-1:3" +
",159:19,-1:21,158:10,35,158:5,35,158:2,-1:3,158:19,-1:21,159:10,66,159:5,66" +
",159:2,-1:3,159:19,-1:2,84:39,-1,84:21,-1:20,158:13,36,158:5,-1:3,158:16,36" +
",158:2,-1:21,159:13,67,159:5,-1:3,159:16,67,159:2,-1:21,158:10,37,158:5,37," +
"158:2,-1:3,158:19,-1:21,159:10,68,159:5,68,159:2,-1:3,159:19,-1:21,158:4,38" +
",158:14,-1:3,158:5,38,158:13,-1:21,159:7,42,159:11,-1:3,159:9,42,159:9,-1:2" +
"1,158:12,39,158:6,-1:3,158:11,39,158:7,-1:21,159:4,69,159:14,-1:3,159:5,69," +
"159:13,-1:21,158:4,40,158:14,-1:3,158:5,40,158:13,-1:21,159:4,71,159:14,-1:" +
"3,159:5,71,159:13,-1:21,41,158:18,-1:3,158:3,41,158:15,-1:21,72,159:18,-1:3" +
",159:3,72,159:15,-1:21,158,43,158:17,-1:3,158:8,43,158:10,-1:21,159:12,70,1" +
"59:6,-1:3,159:11,70,159:7,-1:21,158:7,73,158:11,-1:3,158:9,73,158:9,-1:21,1" +
"59,74,159:17,-1:3,159:8,74,159:10,-1:21,158:4,44,158:14,-1:3,158:5,44,158:1" +
"3,-1:21,159:3,75,159:15,-1:3,159:13,75,159:5,-1:21,158:3,45,158:15,-1:3,158" +
":13,45,158:5,-1:21,159:4,76,159:14,-1:3,159:5,76,159:13,-1:21,158:4,46,158:" +
"14,-1:3,158:5,46,158:13,-1:21,159:15,77,159:3,-1:3,159:4,77,159:14,-1:21,15" +
"8:4,47,158:14,-1:3,158:5,47,158:13,-1:21,159:3,78,159:15,-1:3,159:13,78,159" +
":5,-1:21,158:15,48,158:3,-1:3,158:4,48,158:14,-1:21,158:3,49,158:15,-1:3,15" +
"8:13,49,158:5,-1:21,158:4,89,158:6,124,158:7,-1:3,158:5,89,158:4,124,158:8," +
"-1:21,159:4,90,159:6,135,159:7,-1:3,159:5,90,159:4,135,159:8,-1:21,158:4,92" +
",158:6,94,158:7,-1:3,158:5,92,158:4,94,158:8,-1:21,159:4,93,159:6,95,159:7," +
"-1:3,159:5,93,159:4,95,159:8,-1:21,158:3,96,158:15,-1:3,158:13,96,158:5,-1:" +
"21,159:4,97,159:14,-1:3,159:5,97,159:13,-1:21,158:11,98,158:7,-1:3,158:10,9" +
"8,158:8,-1:21,159:2,141,159:16,-1:3,159,141,159:17,-1:21,158:3,100,158:15,-" +
"1:3,158:13,100,158:5,-1:21,159:3,99,159:15,-1:3,159:13,99,159:5,-1:21,158:2" +
",102,158:16,-1:3,158,102,158:17,-1:21,159:3,101,159:15,-1:3,159:13,101,159:" +
"5,-1:21,158:14,144,158:4,-1:3,158:15,144,158:3,-1:21,159:2,103,159:16,-1:3," +
"159,103,159:17,-1:21,158:11,104,158:7,-1:3,158:10,104,158:8,-1:21,159:14,14" +
"3,159:4,-1:3,159:15,143,159:3,-1:21,158:6,148,158:12,-1:3,158:7,148,158:11," +
"-1:21,159:11,105,159:7,-1:3,159:10,105,159:8,-1:21,158:4,106,158:14,-1:3,15" +
"8:5,106,158:13,-1:21,159:11,107,159:7,-1:3,159:10,107,159:8,-1:21,158:17,10" +
"8,158,-1:3,158:14,108,158:4,-1:21,159:6,147,159:12,-1:3,159:7,147,159:11,-1" +
":21,158,150,158:17,-1:3,158:8,150,158:10,-1:21,159:3,109,159:15,-1:3,159:13" +
",109,159:5,-1:21,158:3,110,158:15,-1:3,158:13,110,158:5,-1:21,159:11,149,15" +
"9:7,-1:3,159:10,149,159:8,-1:21,158:11,152,158:7,-1:3,158:10,152,158:8,-1:2" +
"1,159:4,151,159:14,-1:3,159:5,151,159:13,-1:21,158:4,154,158:14,-1:3,158:5," +
"154,158:13,-1:21,159,111,159:17,-1:3,159:8,111,159:10,-1:21,158,112,158:17," +
"-1:3,158:8,112,158:10,-1:21,159:6,113,159:12,-1:3,159:7,113,159:11,-1:21,15" +
"8:3,114,158:15,-1:3,158:13,114,158:5,-1:21,159:9,153,159:9,-1:3,159:12,153," +
"159:6,-1:21,158:6,116,158:12,-1:3,158:7,116,158:11,-1:21,159:6,155,159:12,-" +
"1:3,159:7,155,159:11,-1:21,158:9,156,158:9,-1:3,158:12,156,158:6,-1:21,159:" +
"10,115,159:5,115,159:2,-1:3,159:19,-1:21,158:6,157,158:12,-1:3,158:7,157,15" +
"8:11,-1:21,158:10,117,158:5,117,158:2,-1:3,158:19,-1:21,158,126,158,128,158" +
":15,-1:3,158:8,126,158:4,128,158:5,-1:21,159,125,127,159:16,-1:3,159,127,15" +
"9:6,125,159:10,-1:21,158:11,132,158:7,-1:3,158:10,132,158:8,-1:21,159,129,1" +
"59,131,159:15,-1:3,159:8,129,159:4,131,159:5,-1:21,158:8,134,158:10,-1:3,15" +
"8:6,134,158:12,-1:21,159:11,137,159:7,-1:3,159:10,137,159:8,-1:21,158:8,136" +
",138,158:9,-1:3,158:6,136,158:5,138,158:6,-1:21,159:8,139,159:10,-1:3,159:6" +
",139,159:12,-1:21,158:2,142,158:16,-1:3,158,142,158:17,-1");

	public java_cup.runtime.Symbol next_token ()
		throws java.io.IOException {
		int yy_lookahead;
		int yy_anchor = YY_NO_ANCHOR;
		int yy_state = yy_state_dtrans[yy_lexical_state];
		int yy_next_state = YY_NO_STATE;
		int yy_last_accept_state = YY_NO_STATE;
		boolean yy_initial = true;
		int yy_this_accept;

		yy_mark_start();
		yy_this_accept = yy_acpt[yy_state];
		if (YY_NOT_ACCEPT != yy_this_accept) {
			yy_last_accept_state = yy_state;
			yy_mark_end();
		}
		while (true) {
			if (yy_initial && yy_at_bol) yy_lookahead = YY_BOL;
			else yy_lookahead = yy_advance();
			yy_next_state = YY_F;
			yy_next_state = yy_nxt[yy_rmap[yy_state]][yy_cmap[yy_lookahead]];
			if (YY_EOF == yy_lookahead && true == yy_initial) {

/*  Stuff enclosed in %eofval{ %eofval} specifies java code that is
 *  executed when end-of-file is reached.
 *  Ultimately, an EOF symbol is returned by the scanner to indicate that the
 *  file has been scanned
 */
    switch(yy_lexical_state) {
    case STRING:
        yybegin(YYINITIAL);
        if (!coolStr.inError())
            return new Symbol(TokenConstants.ERROR, 
                "EOF in string constant");
    case COMMENT:        
        yybegin(YYINITIAL);
            return new Symbol(TokenConstants.ERROR,
                "EOF in comment");
    }
    return new Symbol(TokenConstants.EOF);
			}
			if (YY_F != yy_next_state) {
				yy_state = yy_next_state;
				yy_initial = false;
				yy_this_accept = yy_acpt[yy_state];
				if (YY_NOT_ACCEPT != yy_this_accept) {
					yy_last_accept_state = yy_state;
					yy_mark_end();
				}
			}
			else {
				if (YY_NO_STATE == yy_last_accept_state) {
					throw (new Error("Lexical Error: Unmatched Input."));
				}
				else {
					yy_anchor = yy_acpt[yy_last_accept_state];
					if (0 != (YY_END & yy_anchor)) {
						yy_move_end();
					}
					yy_to_mark();
					switch (yy_last_accept_state) {
					case 1:
						
					case -2:
						break;
					case 2:
						{ return new Symbol(TokenConstants.LPAREN); }
					case -3:
						break;
					case 3:
						{ return new Symbol(TokenConstants.MULT); }
					case -4:
						break;
					case 4:
						{ return new Symbol(TokenConstants.RPAREN); }
					case -5:
						break;
					case 5:
						{ return new Symbol(TokenConstants.ERROR, yytext().charAt(0)); }
					case -6:
						break;
					case 6:
						{++curr_lineno;}
					case -7:
						break;
					case 7:
						{ return new Symbol(TokenConstants.MINUS); }
					case -8:
						break;
					case 8:
						{ return new Symbol(TokenConstants.EQ); }
					case -9:
						break;
					case 9:
						{ return new Symbol(TokenConstants.LT); }
					case -10:
						break;
					case 10:
						{ return new Symbol(TokenConstants.NEG); }
					case -11:
						break;
					case 11:
						{ return new Symbol(TokenConstants.PLUS); }
					case -12:
						break;
					case 12:
						{ return new Symbol(TokenConstants.DIV); }
					case -13:
						break;
					case 13:
						{ return new Symbol(TokenConstants.LBRACE); }
					case -14:
						break;
					case 14:
						{ return new Symbol(TokenConstants.RBRACE); }
					case -15:
						break;
					case 15:
						{ return new Symbol(TokenConstants.COLON); }
					case -16:
						break;
					case 16:
						{ return new Symbol(TokenConstants.SEMI); }
					case -17:
						break;
					case 17:
						{ return new Symbol(TokenConstants.COMMA); }
					case -18:
						break;
					case 18:
						{ return new Symbol(TokenConstants.DOT); }
					case -19:
						break;
					case 19:
						{ return new Symbol(TokenConstants.AT); }
					case -20:
						break;
					case 20:
						{ return new Symbol(TokenConstants.OBJECTID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -21:
						break;
					case 21:
						{ return new Symbol(TokenConstants.TYPEID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -22:
						break;
					case 22:
						{ 
                        /* Start of a string */
                        yybegin(STRING);
                        coolStr = new CoolStringBuilder();
                        }
					case -23:
						break;
					case 23:
						{;}
					case -24:
						break;
					case 24:
						{ return new Symbol(TokenConstants.INT_CONST,
                                        AbstractTable.inttable.addString(yytext()));}
					case -25:
						break;
					case 25:
						{ yybegin(COMMENT);  }
					case -26:
						break;
					case 26:
						{ return new Symbol(TokenConstants.ERROR, "Unmatched *)");}
					case -27:
						break;
					case 27:
						{/* Single line comment*/;}
					case -28:
						break;
					case 28:
						{ return new Symbol(TokenConstants.DARROW); }
					case -29:
						break;
					case 29:
						{ return new Symbol(TokenConstants.ASSIGN); }
					case -30:
						break;
					case 30:
						{ return new Symbol(TokenConstants.LE); }
					case -31:
						break;
					case 31:
						{ return new Symbol(TokenConstants.FI); }
					case -32:
						break;
					case 32:
						{ return new Symbol(TokenConstants.IF); }
					case -33:
						break;
					case 33:
						{ return new Symbol(TokenConstants.IN); }
					case -34:
						break;
					case 34:
						{ return new Symbol(TokenConstants.OF); }
					case -35:
						break;
					case 35:
						{ return new Symbol(TokenConstants.LET); }
					case -36:
						break;
					case 36:
						{ return new Symbol(TokenConstants.NEW); }
					case -37:
						break;
					case 37:
						{ return new Symbol(TokenConstants.NOT); }
					case -38:
						break;
					case 38:
						{ return new Symbol(TokenConstants.CASE); }
					case -39:
						break;
					case 39:
						{ return new Symbol(TokenConstants.LOOP); }
					case -40:
						break;
					case 40:
						{ return new Symbol(TokenConstants.ELSE); }
					case -41:
						break;
					case 41:
						{ return new Symbol(TokenConstants.ESAC); }
					case -42:
						break;
					case 42:
						{ return new Symbol(TokenConstants.THEN); }
					case -43:
						break;
					case 43:
						{ return new Symbol(TokenConstants.POOL); }
					case -44:
						break;
					case 44:
						{ return new Symbol(TokenConstants.BOOL_CONST, true); }
					case -45:
						break;
					case 45:
						{ return new Symbol(TokenConstants.CLASS); }
					case -46:
						break;
					case 46:
						{ return new Symbol(TokenConstants.WHILE); }
					case -47:
						break;
					case 47:
						{ return new Symbol(TokenConstants.BOOL_CONST, false); }
					case -48:
						break;
					case 48:
						{ return new Symbol(TokenConstants.ISVOID); }
					case -49:
						break;
					case 49:
						{ return new Symbol(TokenConstants.INHERITS); }
					case -50:
						break;
					case 50:
						{/* Ignore anything that is not '*' or '(' or '\n' */}
					case -51:
						break;
					case 51:
						{ ++curr_lineno; }
					case -52:
						break;
					case 52:
						{/* Ignore a '(' not followed by a '*' */}
					case -53:
						break;
					case 53:
						{ nested++; }
					case -54:
						break;
					case 54:
						{/* Ignore a '*' not followed by a ')'*/}
					case -55:
						break;
					case 55:
						{
                      if (nested == 0) 
                          yybegin(YYINITIAL);
                      else
                          nested--; 
                      }
					case -56:
						break;
					case 56:
						{
                        /* This strategy adopted in matching strings constants
                         * is to match single-line substrings seperately and 
                         * then to piece them together
                         * The SLASH is excluded in the match on single-line
                         * strings as SLASH is indicative of a escape sequence
                         * represented literally by two characters but in
                         * essence representing just one. We would want to
                         * recognize them as one using ESC_SEQ.
                         * Multi-line string constants are broken up by escaped
                         * newlines which is caught ESC_SEQ.
                         * The NEWLINE in the earlier part of the regular
                         * expression indicates an unterminated string which
                         * is handled below.
                         */
                        if (yytext().charAt(yytext().length() - 1) == '\n')
                           curr_lineno++;
						try { coolStr.append(yytext()); }
						catch(NullInCoolStringException e)  { 
						    return new Symbol(TokenConstants.ERROR,
							    "String contains null character");
						}
						catch(EscapedNullInCoolStringException e) {
						    return new Symbol(TokenConstants.ERROR,
							    "String contains an escaped null character");
						}
                        }
					case -57:
						break;
					case 57:
						{
                            /* It is an error to break a string using an
                             * unescaped newline. However, an error is flagged
                             * only if no other previous error in the string
                             * constant has been found.
                             */ 
                            ++curr_lineno;
                            yybegin(YYINITIAL);
                            if (!coolStr.inError())
                                return new Symbol(TokenConstants.ERROR, 
                                    "Unterminated string constant");
                        }
					case -58:
						break;
					case 58:
						{
                        /* The end of a string constant*/
	                    if (coolStr.length() > MAX_STR_CONST)
                        {
                            coolStr.setError();
                            yybegin(YYINITIAL);
                            return new Symbol(TokenConstants.ERROR,
                                "String constant too long");
                         }
                         yybegin(YYINITIAL);
                         if (!coolStr.inError())
                            return new Symbol(TokenConstants.STR_CONST, 
                                        AbstractTable.stringtable.addString(coolStr.toString()));
                         }
					case -59:
						break;
					case 60:
						{ return new Symbol(TokenConstants.OBJECTID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -60:
						break;
					case 61:
						{ return new Symbol(TokenConstants.TYPEID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -61:
						break;
					case 62:
						{ return new Symbol(TokenConstants.FI); }
					case -62:
						break;
					case 63:
						{ return new Symbol(TokenConstants.IF); }
					case -63:
						break;
					case 64:
						{ return new Symbol(TokenConstants.IN); }
					case -64:
						break;
					case 65:
						{ return new Symbol(TokenConstants.OF); }
					case -65:
						break;
					case 66:
						{ return new Symbol(TokenConstants.LET); }
					case -66:
						break;
					case 67:
						{ return new Symbol(TokenConstants.NEW); }
					case -67:
						break;
					case 68:
						{ return new Symbol(TokenConstants.NOT); }
					case -68:
						break;
					case 69:
						{ return new Symbol(TokenConstants.CASE); }
					case -69:
						break;
					case 70:
						{ return new Symbol(TokenConstants.LOOP); }
					case -70:
						break;
					case 71:
						{ return new Symbol(TokenConstants.ELSE); }
					case -71:
						break;
					case 72:
						{ return new Symbol(TokenConstants.ESAC); }
					case -72:
						break;
					case 73:
						{ return new Symbol(TokenConstants.THEN); }
					case -73:
						break;
					case 74:
						{ return new Symbol(TokenConstants.POOL); }
					case -74:
						break;
					case 75:
						{ return new Symbol(TokenConstants.CLASS); }
					case -75:
						break;
					case 76:
						{ return new Symbol(TokenConstants.WHILE); }
					case -76:
						break;
					case 77:
						{ return new Symbol(TokenConstants.ISVOID); }
					case -77:
						break;
					case 78:
						{ return new Symbol(TokenConstants.INHERITS); }
					case -78:
						break;
					case 79:
						{/* Ignore a '*' not followed by a ')'*/}
					case -79:
						break;
					case 80:
						{
                        /* This strategy adopted in matching strings constants
                         * is to match single-line substrings seperately and 
                         * then to piece them together
                         * The SLASH is excluded in the match on single-line
                         * strings as SLASH is indicative of a escape sequence
                         * represented literally by two characters but in
                         * essence representing just one. We would want to
                         * recognize them as one using ESC_SEQ.
                         * Multi-line string constants are broken up by escaped
                         * newlines which is caught ESC_SEQ.
                         * The NEWLINE in the earlier part of the regular
                         * expression indicates an unterminated string which
                         * is handled below.
                         */
                        if (yytext().charAt(yytext().length() - 1) == '\n')
                           curr_lineno++;
						try { coolStr.append(yytext()); }
						catch(NullInCoolStringException e)  { 
						    return new Symbol(TokenConstants.ERROR,
							    "String contains null character");
						}
						catch(EscapedNullInCoolStringException e) {
						    return new Symbol(TokenConstants.ERROR,
							    "String contains an escaped null character");
						}
                        }
					case -80:
						break;
					case 82:
						{ return new Symbol(TokenConstants.OBJECTID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -81:
						break;
					case 83:
						{ return new Symbol(TokenConstants.TYPEID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -82:
						break;
					case 84:
						{
                        /* This strategy adopted in matching strings constants
                         * is to match single-line substrings seperately and 
                         * then to piece them together
                         * The SLASH is excluded in the match on single-line
                         * strings as SLASH is indicative of a escape sequence
                         * represented literally by two characters but in
                         * essence representing just one. We would want to
                         * recognize them as one using ESC_SEQ.
                         * Multi-line string constants are broken up by escaped
                         * newlines which is caught ESC_SEQ.
                         * The NEWLINE in the earlier part of the regular
                         * expression indicates an unterminated string which
                         * is handled below.
                         */
                        if (yytext().charAt(yytext().length() - 1) == '\n')
                           curr_lineno++;
						try { coolStr.append(yytext()); }
						catch(NullInCoolStringException e)  { 
						    return new Symbol(TokenConstants.ERROR,
							    "String contains null character");
						}
						catch(EscapedNullInCoolStringException e) {
						    return new Symbol(TokenConstants.ERROR,
							    "String contains an escaped null character");
						}
                        }
					case -83:
						break;
					case 86:
						{ return new Symbol(TokenConstants.OBJECTID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -84:
						break;
					case 87:
						{ return new Symbol(TokenConstants.TYPEID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -85:
						break;
					case 89:
						{ return new Symbol(TokenConstants.OBJECTID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -86:
						break;
					case 90:
						{ return new Symbol(TokenConstants.TYPEID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -87:
						break;
					case 92:
						{ return new Symbol(TokenConstants.OBJECTID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -88:
						break;
					case 93:
						{ return new Symbol(TokenConstants.TYPEID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -89:
						break;
					case 94:
						{ return new Symbol(TokenConstants.OBJECTID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -90:
						break;
					case 95:
						{ return new Symbol(TokenConstants.TYPEID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -91:
						break;
					case 96:
						{ return new Symbol(TokenConstants.OBJECTID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -92:
						break;
					case 97:
						{ return new Symbol(TokenConstants.TYPEID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -93:
						break;
					case 98:
						{ return new Symbol(TokenConstants.OBJECTID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -94:
						break;
					case 99:
						{ return new Symbol(TokenConstants.TYPEID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -95:
						break;
					case 100:
						{ return new Symbol(TokenConstants.OBJECTID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -96:
						break;
					case 101:
						{ return new Symbol(TokenConstants.TYPEID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -97:
						break;
					case 102:
						{ return new Symbol(TokenConstants.OBJECTID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -98:
						break;
					case 103:
						{ return new Symbol(TokenConstants.TYPEID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -99:
						break;
					case 104:
						{ return new Symbol(TokenConstants.OBJECTID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -100:
						break;
					case 105:
						{ return new Symbol(TokenConstants.TYPEID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -101:
						break;
					case 106:
						{ return new Symbol(TokenConstants.OBJECTID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -102:
						break;
					case 107:
						{ return new Symbol(TokenConstants.TYPEID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -103:
						break;
					case 108:
						{ return new Symbol(TokenConstants.OBJECTID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -104:
						break;
					case 109:
						{ return new Symbol(TokenConstants.TYPEID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -105:
						break;
					case 110:
						{ return new Symbol(TokenConstants.OBJECTID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -106:
						break;
					case 111:
						{ return new Symbol(TokenConstants.TYPEID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -107:
						break;
					case 112:
						{ return new Symbol(TokenConstants.OBJECTID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -108:
						break;
					case 113:
						{ return new Symbol(TokenConstants.TYPEID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -109:
						break;
					case 114:
						{ return new Symbol(TokenConstants.OBJECTID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -110:
						break;
					case 115:
						{ return new Symbol(TokenConstants.TYPEID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -111:
						break;
					case 116:
						{ return new Symbol(TokenConstants.OBJECTID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -112:
						break;
					case 117:
						{ return new Symbol(TokenConstants.OBJECTID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -113:
						break;
					case 118:
						{ return new Symbol(TokenConstants.OBJECTID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -114:
						break;
					case 119:
						{ return new Symbol(TokenConstants.TYPEID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -115:
						break;
					case 120:
						{ return new Symbol(TokenConstants.OBJECTID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -116:
						break;
					case 121:
						{ return new Symbol(TokenConstants.TYPEID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -117:
						break;
					case 122:
						{ return new Symbol(TokenConstants.OBJECTID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -118:
						break;
					case 123:
						{ return new Symbol(TokenConstants.TYPEID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -119:
						break;
					case 124:
						{ return new Symbol(TokenConstants.OBJECTID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -120:
						break;
					case 125:
						{ return new Symbol(TokenConstants.TYPEID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -121:
						break;
					case 126:
						{ return new Symbol(TokenConstants.OBJECTID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -122:
						break;
					case 127:
						{ return new Symbol(TokenConstants.TYPEID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -123:
						break;
					case 128:
						{ return new Symbol(TokenConstants.OBJECTID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -124:
						break;
					case 129:
						{ return new Symbol(TokenConstants.TYPEID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -125:
						break;
					case 130:
						{ return new Symbol(TokenConstants.OBJECTID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -126:
						break;
					case 131:
						{ return new Symbol(TokenConstants.TYPEID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -127:
						break;
					case 132:
						{ return new Symbol(TokenConstants.OBJECTID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -128:
						break;
					case 133:
						{ return new Symbol(TokenConstants.TYPEID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -129:
						break;
					case 134:
						{ return new Symbol(TokenConstants.OBJECTID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -130:
						break;
					case 135:
						{ return new Symbol(TokenConstants.TYPEID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -131:
						break;
					case 136:
						{ return new Symbol(TokenConstants.OBJECTID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -132:
						break;
					case 137:
						{ return new Symbol(TokenConstants.TYPEID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -133:
						break;
					case 138:
						{ return new Symbol(TokenConstants.OBJECTID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -134:
						break;
					case 139:
						{ return new Symbol(TokenConstants.TYPEID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -135:
						break;
					case 140:
						{ return new Symbol(TokenConstants.OBJECTID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -136:
						break;
					case 141:
						{ return new Symbol(TokenConstants.TYPEID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -137:
						break;
					case 142:
						{ return new Symbol(TokenConstants.OBJECTID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -138:
						break;
					case 143:
						{ return new Symbol(TokenConstants.TYPEID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -139:
						break;
					case 144:
						{ return new Symbol(TokenConstants.OBJECTID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -140:
						break;
					case 145:
						{ return new Symbol(TokenConstants.TYPEID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -141:
						break;
					case 146:
						{ return new Symbol(TokenConstants.OBJECTID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -142:
						break;
					case 147:
						{ return new Symbol(TokenConstants.TYPEID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -143:
						break;
					case 148:
						{ return new Symbol(TokenConstants.OBJECTID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -144:
						break;
					case 149:
						{ return new Symbol(TokenConstants.TYPEID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -145:
						break;
					case 150:
						{ return new Symbol(TokenConstants.OBJECTID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -146:
						break;
					case 151:
						{ return new Symbol(TokenConstants.TYPEID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -147:
						break;
					case 152:
						{ return new Symbol(TokenConstants.OBJECTID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -148:
						break;
					case 153:
						{ return new Symbol(TokenConstants.TYPEID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -149:
						break;
					case 154:
						{ return new Symbol(TokenConstants.OBJECTID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -150:
						break;
					case 155:
						{ return new Symbol(TokenConstants.TYPEID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -151:
						break;
					case 156:
						{ return new Symbol(TokenConstants.OBJECTID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -152:
						break;
					case 157:
						{ return new Symbol(TokenConstants.OBJECTID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -153:
						break;
					case 158:
						{ return new Symbol(TokenConstants.OBJECTID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -154:
						break;
					case 159:
						{ return new Symbol(TokenConstants.TYPEID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -155:
						break;
					case 160:
						{ return new Symbol(TokenConstants.OBJECTID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -156:
						break;
					case 161:
						{ return new Symbol(TokenConstants.TYPEID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -157:
						break;
					case 162:
						{ return new Symbol(TokenConstants.OBJECTID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -158:
						break;
					case 163:
						{ return new Symbol(TokenConstants.TYPEID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -159:
						break;
					case 164:
						{ return new Symbol(TokenConstants.OBJECTID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -160:
						break;
					case 165:
						{ return new Symbol(TokenConstants.TYPEID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -161:
						break;
					case 166:
						{ return new Symbol(TokenConstants.OBJECTID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -162:
						break;
					case 167:
						{ return new Symbol(TokenConstants.TYPEID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -163:
						break;
					case 168:
						{ return new Symbol(TokenConstants.OBJECTID,
                                        AbstractTable.idtable.addString(yytext()));}
					case -164:
						break;
					default:
						yy_error(YY_E_INTERNAL,false);
					case -1:
					}
					yy_initial = true;
					yy_state = yy_state_dtrans[yy_lexical_state];
					yy_next_state = YY_NO_STATE;
					yy_last_accept_state = YY_NO_STATE;
					yy_mark_start();
					yy_this_accept = yy_acpt[yy_state];
					if (YY_NOT_ACCEPT != yy_this_accept) {
						yy_last_accept_state = yy_state;
						yy_mark_end();
					}
				}
			}
		}
	}
}
